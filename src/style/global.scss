@import 'variables';
@import 'mixins';

$navbar-height: $navbar-brand-height + 2 * ($navbar-brand-padding-y + $navbar-padding-y);

input, textarea, select, button {
  color: inherit;
  font-weight: inherit;
  font-style: inherit;
}

h6, .h6 {
  @extend .text-muted;
  font-weight: $font-weight-light;
}

.lh-0 {
  line-height: 1 !important;
}

.btn-link {
  @include disabled {
    text-decoration: none;
  }
}

.input-group {
  &-prepend, &-append {
    .btn {
      z-index: 6; // Ensure focused input doesn't overlap addons
    }
  }
}

/*
  This will hide the focus indicator if the element receives focus via the mouse,
  but it will still show up on keyboard focus.
*/
.js-focus-visible :focus {
  &:not(.focus-visible) {
    outline: 0 !important;
    box-shadow: none !important;
  }
  &.focus-visible {
    position: relative;
    z-index: 5 !important;
  }
}

.flat:not(.focus-visible) {
  box-shadow: none !important;
}

@each $theme, $value in $theme-colors {
  $text-color: color-yiq($value);
  $value-hover: lighten($value, $component-hover-color-lighten);
  $value-active: lighten($value, $component-active-color-lighten);
  .btn-#{$theme} {
    @include focus {
      background-color: $value;
    }
    @include button-variant(
      $value, bg-border-color($value),
      $value-hover, bg-border-color($value-hover),
      $value-active, bg-border-color($value-active));
    @include hover {
      color: $text-color;
    }
    @include btn-variant-active {
      color: $text-color;
    }
  }
  .btn-outline-#{$theme} {
    @include focus {
      background-color: $component-bg;
    }
    @include button-outline-variant($value, $value-hover,
      $component-active-bg, $value-active);
    background-color: $component-bg;
    @include hover {
      background-color: $component-hover-bg;
    }
    box-shadow: $btn-box-shadow;
    @include btn-variant-active {
      color: $value-active;
      box-shadow: $btn-active-box-shadow;
    }
  }
}

.btn-ultra-dark {
  @include focus {
    box-shadow: $btn-box-shadow, $btn-focus-box-shadow;
  }
  @include btn-variant-active {
    @include focus {
      box-shadow: $btn-active-box-shadow, $btn-focus-box-shadow;
    }
  }
}

.border-dashed {
  border-style: dashed;
}

th {
  font-weight: $headings-font-weight;
}

.form-control {
  font-weight: $font-weight-base;
}

.container, .container-fluid {
  // Use $grid-spacer horizontal padding to ensure width of rows in a container are evenly divisible by 12
  padding-left: $grid-spacer;
  padding-right: $grid-spacer;
}

// Custom gutter width classes `gutter[x|y]-[{breakpoint}-]{size}`
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .row {
      @each $size, $width in $grid-gutter-widths-custom {
        $value: ($width / 2);
        &.gutter-x#{$infix}-#{$size}, &.gutter#{$infix}-#{$size} {
          margin-left: -$value;
          margin-right: -$value;
          @include col {
            padding-left: $value;
            padding-right: $value;
          }
        }
        &.gutter-y#{$infix}-#{$size}, &.gutter#{$infix}-#{$size} {
          margin-top: -$value;
          margin-bottom: -$value;
          @include col {
            padding-top: $value;
            padding-bottom: $value;
          }
        }
      }
    }
  }
}

%menu-action {
  border-radius: 0;
  box-shadow: none;
  transition: none !important;
  @include focus {
    z-index: inherit;
  }
  @include hover {
    box-shadow: none;
    z-index: 1;
  }
  @include not-disabled {
    &:active {
      z-index: 2;
      box-shadow: none;
    }
    &.active {
      box-shadow: none;
      z-index: 3;
      border-color: $primary;
      @include focus {
        box-shadow: 0 0 0 ($btn-focus-width + $border-width) rgba($primary, .5);
      }
    }
  }
  @include disabled {
    z-index: inherit;
  }
}

.grid-cell {
  border: solid $border-width $border-color;
}
button.grid-cell {
  @extend %menu-action;
}

.grid-group {
  padding: 0;
  overflow: hidden;

  > .row {
    margin: (-$border-width) 0 0 (-$border-width);

    @include col {
      padding: 0;
      overflow: visible;
      > .grid-cell {
        position: relative;
        display: block;
        padding: 0;
        margin: 0;
        width: calc(100% + #{$border-width});
        height: calc(100% + #{$border-width});
      }
    }

    @each $size, $width in $grid-gutter-widths-custom {
      $value: ($width / 2);
      &.gutter-x-#{$size}, &.gutter-#{$size} {
        @include col {
          > .grid-cell {
            padding-left: $value;
            padding-right: $value;
          }
        }
      }
      &.gutter-y-#{$size}, &.gutter-#{$size} {
        @include col {
          > .grid-cell {
            padding-top: $value;
            padding-bottom: $value;
          }
        }
      }
    }
  }
}

.card {
  box-shadow: $component-shadow;

  > .list-group {
    margin-left: (-$border-width);
    margin-right: (-$border-width);
    &:first-child {
      margin-top: (-$border-width);
    }
    &:last-child {
      margin-bottom: (-$border-width);
    }
  }

  > .table {
    &:first-child {
      margin-top: $border-radius;
      thead {
        tr:first-child {
          th {
            border-top: none;
          }
        }
      }
    }
    &:last-child {
      margin-bottom: $border-radius;
    }
    th, td {
      &:first-child {
        border-left: none;
      }
    }
  }
}

.card-header {
  border-bottom: $component-border;
}

.card-header, .list-group-item, td, th {
  @include heading-child {
    &:last-child {
      margin-bottom: 0;
    }
  }
}

.dropdown-item {
  @extend %menu-action;
}

.dropdown-divider {
  border-color: $primary;
}

.list-group {
  > .collapse {
    margin-bottom: (-$border-width);
    &:not(:first-child) {
      > .list-group-item:first-child {
        border-top-right-radius: 0;
        border-top-left-radius: 0;
      }
    }
    &:not(:last-child) {
      > .list-group-item:last-child {
        border-bottom-right-radius: 0;
        border-bottom-left-radius: 0;
      }
    }
  }

  &-item {
    @include hover {
      z-index: inherit;
    }
    &.grid-group {
      border-width: 0;
      > .row {
        margin: 0;
        padding-right: $border-width;
        padding-bottom: $border-width;
      }
    }

    &-action {
      @extend %menu-action;
    }
  }
}

.table-striped tbody {
  td {
    // border: none !important;
  }
}

.table-accordian {
  border-collapse: collapse;
  tbody {
    tr.accordian {
      td {
        padding: 0;
        overflow: hidden;
        border-top: none;
        border-bottom: $component-border;
      }
      &:last-child {
        td {
          border-bottom: none;
        }
      }
    }
  }
  &.table-striped {
    thead tr {
      @if $table-striped-order == even {
        background-color: $component-accent-bg;
      }
    }
    tbody tr {
      background-color: transparent;

      &.accordian {
        &, &:hover {
          $accordian-blur: 10px;
          $accordian-spread: (-8px);
          box-shadow:
            inset 0 (-$accordian-spread) $accordian-blur $accordian-spread $component-shadow-color,
            inset 0 $accordian-spread $accordian-blur $accordian-spread $component-shadow-color;
        }
      }

      @mixin accordian-row-style {
        &, & + .accordian, & + .accordian:hover {
          background-color: $component-accent-bg;
        }
      }
      @if $table-striped-order == odd {
        &:nth-of-type(4n+1) {
          @include accordian-row-style;
        }
      } @else {
        &:nth-of-type(4n-1) {
          @include accordian-row-style;
        }
      }
    }
  }
  &.table-hover tbody {
    cursor: pointer;
    tr {
      @include hover {
        background-color: $component-hover-bg;
        &.accordian {
          background-color: transparent;
          cursor: default;
        }
      }
    }
  }
}


.modal-dialog {
  min-height: 500px;
}
.modal-content {
  height: 100%;
  border-radius: $modal-content-border-radius;
}
.modal-header {
  .close {
    line-height: $modal-title-line-height;
    margin: 0;
    position: absolute;
    top: 0;
    right: 0;
  }
  h1 ~ .close { font-size: $h1-font-size; }
  h2 ~ .close { font-size: $h2-font-size; }
  h3 ~ .close { font-size: $h3-font-size; }
  h4 ~ .close { font-size: $h4-font-size; }
  h5 ~ .close { font-size: $h5-font-size; }
  h6 ~ .close { font-size: $h6-font-size; }
}
.modal-text {
  @include media-breakpoint-up(lg) {
    width: 75%;
    margin-left: auto;
    margin-right: auto;
  }
  ul {
    text-align: left;
  }
}
